{"name":"Norby","tagline":"Call your Ruby libraries from node.js","body":"norby\r\n=====\r\n\r\n[![NPM version](https://badge.fury.io/js/norby.svg)](http://badge.fury.io/js/norby)\r\n[![Build Status](https://travis-ci.org/rylanc/norby.svg?branch=master)](https://travis-ci.org/rylanc/norby)\r\n\r\nCall your Ruby libraries from node.js\r\n\r\n```js\r\nvar ruby = require('norby');\r\n\r\nvar Time = ruby.getClass('Time');\r\nvar t = new Time(2014, 7, 2);\r\nconsole.log('Year: ' + t.year()); // => 'Year: 2014'\r\nconsole.log(t); // => '2014-07-02 00:00:00 -0400'\r\n```\r\n\r\n## To install\r\n\r\nPrerequisites:\r\n\r\n    * node.js >= 0.10\r\n    * ruby >= 1.9\r\n\r\nInstall using npm:\r\n\r\n```sh\r\nnpm install norby\r\n```\r\n\r\nCompile from repository:\r\n\r\n```sh\r\ngit clone https://github.com/rylanc/norby.git\r\ncd norby\r\nnpm install\r\n```\r\n\r\nRun unit tests:\r\n```sh\r\nnpm test\r\n```\r\n\r\n## What's missing\r\n\r\nnorby is currently in an early beta state. Check back for updates as features\r\nare implemented. Feel free to add an issue for any bugs or missing features.\r\n\r\n - Windows support. node.js is built with Visual Studio while most Windows Ruby\r\n   installers use [MinGW](http://www.mingw.org). It may work if you build Ruby\r\n   with VS, but I haven't tried it yet.\r\n - Support for Ruby version 1.8.X\r\n - Support for Ruby including/extending\r\n - Support for Ruby hashes\r\n - Conversion of JS objects (that aren't wrapped Ruby objects)\r\n - Support for Ruby global variables\r\n\r\n## API\r\n\r\n### ruby\r\n\r\n  Exposed by `require('norby')`.\r\n  \r\n### ruby#require(name:String)\r\n\r\n  Calls Ruby's [require](http://www.ruby-doc.org/core/Kernel.html#method-i-require)\r\n  method with the specified `name`.\r\n  \r\n### ruby#eval(code:String [, binding:Binding [, filename:String [, lineno:Number]]])\r\n  Calls Ruby's [eval](http://www.ruby-doc.org/core/Kernel.html#method-i-eval) method\r\n  with the specified parameters.\r\n\r\n### ruby#getClass(name:String)\r\n\r\n  Returns a wrapped Ruby class (or struct) specified by `name`. The `new` class\r\n  method will be called when the constructor is called.\r\n  \r\n```js\r\nvar Time = ruby.getClass('Time');\r\nvar t = new Time(2014, 7, 2);\r\n```\r\n  \r\n  To get a class within a module, separate the module and class with `::`.\r\n  \r\n```js\r\nvar ZlibInflate = ruby.getClass('Zlib::Inflate');\r\n```\r\n\r\n  Class methods and constants are exposed as properties of the constructor.\r\n\r\n```js\r\nvar Time = ruby.getClass('Time');\r\nvar t = Time.utc(2014, 7, 2);\r\n\r\nvar File = ruby.getClass('File');\r\nconsole.log(File.SEPARATOR); // => '/'\r\n```\r\n\r\n### ruby#newInstance(className:String [, â€¦])\r\n\r\n  Returns a new instance of a Ruby object specified by `className`. Any\r\n  additional arguments will be passed on to the class's   `new` method.\r\n\r\n```js\r\nvar t = ruby.newInstance('Time', 2014, 7, 2);\r\n```\r\n\r\n### ruby#inherits(derived:Constructor, superName:String)\r\n  \r\n  Creates a new Ruby class (named `derived.name`) who's superclass is specified\r\n  by `superName`. All public instance methods of `superName` will be added to\r\n  the derived class's prototype. To add methods to the derived class, call its\r\n  `defineMethod` function. This will add the method to the class's prototype and\r\n  override the Ruby superclass's method. Adding the method to the prototype only\r\n  will fail to override the superclass's method.\r\n\r\n```ruby\r\n# base.rb\r\nclass Base\r\n  def call_me\r\n  end\r\n  def make_call\r\n    call_me\r\n  end\r\nend\r\n```\r\n```js\r\nruby.require('./base');\r\n\r\nfunction Derived() {\r\n  Derived.super_.apply(this, arguments);\r\n  this.val = 'Hello';\r\n}\r\nruby.inherits(Derived, 'Base');\r\n\r\nDerived.defineMethod('call_me', function() {\r\n  console.log('In JS: ' + this.val);\r\n});\r\n\r\nvar d = new Derived();\r\nd.make_call(); // => 'In JS: Hello'\r\n```\r\n\r\n### ruby#getMethod(name:String)\r\n\r\n  Returns a JS function that wraps the Ruby method specified by `name`. This\r\n  currently only works with [Kernel](http://www.ruby-doc.org/core/Kernel.html)\r\n  methods.\r\n\r\n```ruby\r\n# hello.rb\r\ndef my_func (name)\r\n  puts \"Hello, #{name}!\"\r\nend\r\n```\r\n\r\n```js\r\nruby.require('./hello');\r\nvar my_func = ruby.getMethod('my_func');\r\nmy_func('Stan');\r\n```\r\n\r\n### ruby#getConstant(name:String)\r\n  \r\n  Returns the Ruby constant specified by `name`. To get a constant within a\r\n  module or class, separate the module and constant with ::. Without the\r\n  separator, it returns an [Object](http://www.ruby-doc.org/core/Object.html)\r\n  constant. `getConstant` can also be used to return modules.\r\n\r\n```ruby\r\n# const.rb\r\nmodule MyMod\r\n  MY_CONST = \"abcde\"\r\nend\r\n\r\nclass MyClass\r\n  OTHER_CONST = \"fghi\"\r\nend\r\n```\r\n  \r\n```js\r\nruby.require('./const');\r\nvar RUBY_VERSION = ruby.getConstant('RUBY_VERSION');\r\nconsole.log(ruby.getConstant('MyMod::MY_CONST')); // => 'abcde'\r\nconsole.log(ruby.getConstant('MyClass::OTHER_CONST')); // => 'fghi'\r\n```\r\n\r\n## Ruby objects\r\n\r\n### Methods\r\n\r\nWrapped Ruby objects expose their public instance methods through function\r\nproperties.\r\n\r\n```js\r\nvar Time = ruby.getClass('Time');\r\nvar t = new Time(2014, 7, 2);\r\nconsole.log(t.year()); // => '2014'\r\n```\r\n\r\nThe Ruby `to_s` method is mapped to the JS `toString()` function.\r\n\r\n```js\r\nconsole.log(t.toString()); // => '2014-07-02 00:00:00 -0400'\r\n```\r\n\r\nSince node's `console.log()` function calls `inspect` with  a `depth` argument,\r\nit is ignored when passed to the Ruby `inspect` method.\r\n\r\n```js\r\nconsole.log(t); // => '2014-07-02 00:00:00 -0400'\r\n```\r\n\r\n### Blocks\r\n\r\nIf the last argument in a method call is a function, it is passed to the method\r\nas a Ruby block.\r\n\r\n```js\r\nvar Regexp = ruby.getClass('Regexp');\r\nvar pat = new Regexp('.at');\r\npat.match('cat', function() {\r\n  console.log('match!');\r\n}); // => 'match!'\r\n```\r\n\r\n## Ruby Modules\r\n\r\nTo retrieve Ruby modules, call `ruby#getConstant`. Modules are returned as JS\r\nobjects with their class methods and constants as properties.\r\n\r\n```ruby\r\n# mod.rb\r\n\r\nmodule MyMod\r\n  MY_CONST = \"abcde\"\r\n  \r\n  def MyMod.say_hi\r\n    puts \"Hello\"\r\n  end\r\nend\r\n```\r\n\r\n```js\r\nruby.require('./mod');\r\nvar MyMod = ruby.getConstant('MyMod');\r\n\r\nconsole.log(MyMod.MY_CONST); // => 'abcde'\r\nMyMod.say_hi(); // => 'Hello'\r\n```\r\n\r\n## Type conversion\r\n\r\n### From node\r\n\r\n#### `null` and `undefined`\r\n\r\nAre converted to `nil`.\r\n\r\n#### booleans\r\n\r\nAre converted to Ruby booleans.\r\n\r\n#### numbers\r\n\r\nIf the number can be determined to be an integer (`v8::Value::IsInt32()`), it's\r\nconverted to a Ruby `Fixnum`. Otherwise, it's converted to a `Float`.\r\n\r\n#### arrays\r\n\r\nAre converted to Ruby arrays. Their contents are recursively converted.\r\n\r\n#### strings\r\n\r\nAre converted to Ruby strings.\r\n\r\n#### Ruby objects\r\n\r\nWrapped Ruby objects are unwrapped.\r\n\r\n### From Ruby\r\n\r\n#### `nil`\r\n\r\nIs converted to `undefined`.\r\n\r\n#### booleans\r\n\r\nAre converted to JS booleans.\r\n\r\n#### `Float`s\r\n\r\nAre converted to JS numbers.\r\n\r\n#### `Fixnum`s\r\n\r\nAre converted to JS numbers. Keep in mind that JS stores numbers as double\r\nprecision floating point numbers, meaning that `Fixnum`s (and `Bignum`s) will\r\nlose precision above 2<sup>53</sup>.\r\n\r\n#### `Bignum`s\r\n\r\nAre converted to JS numbers if they are less than or equal to `Number.MAX_VALUE`.\r\nOtherwise, they are converted into JS strings. See the above note about precision.\r\n\r\n#### arrays\r\n\r\nAre converted to JS arrays. Their contents are recursively converted.\r\n\r\n#### strings\r\n\r\nAre converted to JS strings.\r\n\r\n#### `Symbol`s\r\n\r\nAre converted to JS strings.\r\n\r\n#### Ruby objects\r\n\r\nAre wrapped as JS objects.\r\n\r\n#### Ruby exceptions\r\n\r\nAre caught within norby native code, converted to v8 exceptions and rethrown.\r\nThe thrown v8 exceptions have a `rubyStack` property that holds the result of\r\ncalling `Exception#backtrace` on the original Ruby exceptions.\r\n\r\n## License\r\n\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2014 Rylan Collins\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}